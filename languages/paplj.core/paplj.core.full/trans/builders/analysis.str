module builders/analysis

imports editor-common.generated
imports runtime/index/-
imports runtime/nabl/-
imports runtime/properties/-
imports runtime/types/-
imports runtime/task/-
imports runtime/analysis/-
imports runtime/editor/-
  
imports runtime/analysis/core

imports pretty-print/pp 
imports desugar/desugar
imports check/check

rules // Analysis

  pre-trans = pre-desugar
  
  post-trans = post-desugar

  editor-analyze = analyze-all(pre-trans, post-trans, id | <language>)

rules // Editor services

  editor-resolve:
    (node, _, _, _, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  editor-hover:
    (node, _, _, _, project-path) -> label
    where
      label := <get-editor-properties(pp-partial-PAPLJ-string|<language>, project-path); properties-to-html> node

rules // Debugging
  
  debug-show-analyzed:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast
  
  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-project-resolve = 
    analysis-debug-index-project-resolve(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)
    
//imports desugar/desugar
//imports check/check
//imports pretty-print/pp

//imports lib/editor-common.generated
//imports runtime/analysis/-
//imports runtime/index/-
//imports runtime/nabl/-
//imports runtime/properties/-
//imports runtime/types/-
//imports runtime/task/-
//imports runtime/editor/-

// rules // Analysis
// 	
// 	editor-analyze = analysis-default-editor
// 	
// 	analysis-single-default-interface = 
// 		analysis-single-default(pre-desugar, id, id|<language>)
// 	analysis-multiple-default-interface = 
// 		analysis-multiple-default(parse-file <+ !(), pre-desugar, id, id|<language>, <project-path>)
// 	
// 	editor-save = analysis-save-default(|<language>)
	
//rules // Analysis
//	

//	
//	editor-analyze = analysis-default-editor
//	
//	analysis-single-default-interface = 
//		analyze-all(pre-trans, post-trans, pp-message-top | <language>)
//	analysis-multiple-default-interface = 
//		analysis-multiple-default(parse-file <+ !(), pre-trans, post-trans, pp-message-top | <language>, <project-path>)
//	
//	editor-save = analysis-save-default(|<language>)
//
//  analyze-ast-step: 
//    (ast, path, project-path) -> (analyzed-ast, error*)
//    with
//      (analyzed-ast, error*, warning*, note*) := <analysis-single-default-interface>(ast, path, project-path)
    
 
rules	//@see http://yellowgrass.org/issue/Spoofax/823
	
	pp-message-top = origin-track-forced((id, strip-annos; pp-message))
	pp-message : Def(uri) -> <pp-uri>uri
	pp-message = not(is-list); (is-string <+ pp-result <+ pp-partial-PAPLJ-string <+ (strip-annos; write-to-string))
	pp-message = map(pp-message); concat-strings
	// pp-message: list -> $[<div>[<map(pp-message); separate-by(|"<br/>"); concat-strings>list]</div>]
	// 	where is-list
	
	pp-result:
	    result@Result(_) -> msg
	    where
	       if <task-has-failed> result then
	         msg := "fail"
	       else
	         msg := <task-get-results; map(pp-message); separate-by(|" or "); concat-strings> result
	       end
	       
	       