module expr

language LangA

start symbol Expr

test Add [[
  1 + 2
]] parse succeeds

test number [[
  1
]] parse to Num("1")

test multiplication [[
  1 * 2
]] parse to Mul(Num("1"), _)

test parentheses [[
  (1 + 2)
]] parse to Add(Num("1"), Num("2"))

// priority

test multiply and add (1) [[
  1 + 2 * 3
]] parse to Add(_, Mul(_, _))

test multiply and add (2) [[
  1 + 2 * 3
]] parse to [[
  1 + (2 * 3)
]]

test multiplication > addition [[
  1 * 2 + 3
]] parse to [[
  (1 * 2) + 3
]] 

test add is left associative [[
  1 + 2 + 3
]] parse to [[
  (1 + 2) + 3
]]

