module Expressions

imports Common 
imports ArithmeticExpressions 
imports BooleanExpressions

sorts Block
context-free syntax

  Expr = Block
  Block.Do = [
  	{ 
  	  [{Seq ";\n"}*]
  	}
  ]
  
  Seq = Expr 
  Seq.Skip = []
 
context-free syntax // variables

  Expr.Var = ID 
  
  Expr.Let = [
  	let [{Bind "\n"}*] 
  	 in [Expr]
  ]
  
  Bind.Bind = [[Type] [ID] = [Expr]]
  
context-free syntax // objects
    
  Expr.Get   = [[Expr].[ID]]
  Expr.Set   = [[Expr].[ID] = [Expr]]
  Expr.Call  = [[Expr].[ID]([{Expr ", "}*])]

  Expr.New   = [new [ID]()]
  Expr.This  = [this]
  Expr.Null  = [null [ID]]
  Expr.Cast  = [([ID])[Expr]]
 
  Type.NumT   = [Num]
  Type.BoolT  = [Bool]
  Type.ClassT = ID
     
context-free syntax // reserved words
  
  ID   = [Num]   {reject}
  ID   = [Bool]  {reject}
  ID   = [true]  {reject}
  ID   = [false] {reject}
  ID   = [this]  {reject} 
  ID   = [new]   {reject} 

context-free priorities

  {Expr.Get Expr.Call Expr.Cast}
  > {Expr.Not Expr.Min} 
  > Expr.Mul 
  > {left: Expr.Add Expr.Sub} 
  > Expr.Eq 
  > Expr.And 
  > Expr.Or
  > Expr.Set
  > {Expr.If Expr.Let}
  
lexical restrictions

  "new" -/- [a-zA-Z]