module trans/check/sub.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  src-gen/signatures/Programs-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Classes-sig
  
signature constructors
  
  
  
rules // functions 
  
  type-func-least-upper-bound(|ctx) : 
    False() -> False()
  

rules // relations
  
  relation-is-reflexive = ?"<sub:"
  
  relation-is-transitive = ?"<sub:"
  

rules // rules
  
  nabl-constraint(|ctx) :
    Class(c1, Extends(c2), _, _) -> <fail>
    where 
      relstore8 := <new-rel-tuple(|ctx, "<sub:", ClassT(c2))> ClassT(c1)
  
  create-type-task(|ctx) :
    If(e1, e2, e3) -> <task-create-id(|ctx,[t])> t
    where 
      x723 := <type-task(|ctx)> e1;
      eq74 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x723])> x723;
      <task-create-error-on-failure(|ctx, eq74, "boolean expected")> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [eq74])> e2;
      t3 := <type-task(|ctx); task-create-id(|ctx, [t2])> e3;
      t := <type-func-least-upper-bound(|ctx); task-create-id(|ctx, [t3])> (t2, t3);
      <task-create-error-on-failure(|ctx, t, ["Branches do not have a common super type: ", t3, " does not have a common super type with ", t2])> e3
  

rules // projections
  
