module builders/run

imports builders/analysis

imports lib/editor-common.generated
imports lib/runtime/analysis/-
imports lib/runtime/index/-
imports lib/runtime/nabl/-
imports lib/runtime/properties/-
imports lib/runtime/types/-
imports lib/runtime/task/-
imports lib/runtime/editor/-

imports src-gen/signatures/Values-sig
imports src-gen/signatures/Classes-sig


signature
  constructors
    R_default_V : Value * Store -> Result
    
rules
	
  external runprogram(|)
  
  runprogram-value = runprogram; ?R_default_V(<render-value>, _)
 
  run-program-basic-builder :
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, project-path);
	    task-setup(|project-path);
					
	    (ast', error*) := <analyze-ast-step> (ast, path, project-path);
			
      filename := <guarantee-extension(|"run.aterm")> path;
      if not([] := error*) then
        <debug(!"Fix errors before generating code. Exiting code generation. ")> error*;
        result := None()
      else
        result := <strip-annos; debug(!"ast: "); runprogram> ast'
      end
          
  editor-run-program-debug :
    (selected, position, ast, path, project-path) -> (filename, result)
    with 
      (filename, result) := <run-program-basic-builder>

          
  editor-run-program :
    tuple@(selected, position, ast, path, project-path) -> (filename, <render-value>result)
    with 
      (filename, R_default_V(result, _)) := <run-program-basic-builder>tuple

rules
  
  render-value :
    NumV(i) -> NumV(<int-to-string>i)
  
  render-value : 
    BoolV("___DS_False___"#([])) -> BoolV(FalseV())
  
  render-value : 
    BoolV("___DS_True___"#([])) -> BoolV(TrueV())
    
  render-value :
    o2v(o) -> <render-value>o
    
  render-value :
    ObjV(x, s, fm, mm) -> ObjV(x, <render-value>s, <render-value>fm, <render-value>mm)
    
  render-value :
    NoSuper() -> NoSuper()
    
  render-value :
    Super(o) -> Super(<render-value>o)
    
  render-value :
    "Map"#([x | binds]) -> Map(x, <map(render-value)> binds)
    
  render-value :
    Bind(x, v) -> Bind(x, <render-value>v)
    
  render-value :
  	m@Method(_, _, _, _) -> m 
  	
  render-value =
  	is-int
  
  render-value = 
    debug(!"fail: ")
    
  
  