module trans/check/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  src-gen/signatures/Programs-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Classes-sig
  
signature constructors
  
  
  
rules // functions 
  
  type-func-least-upper-bound(|ctx) : 
    False() -> False()
  

rules // relations
  
  relation-is-reflexive = ?"<sub:"
  
  relation-is-transitive = ?"<sub:"
  

rules // rules
  
  nabl-constraint(|ctx) :
    Class(c1, Extends(c2), _, _) -> <fail>
    where 
      relstore10 := <new-rel-tuple(|ctx, "<sub:", ClassT(c2))> ClassT(c1)
  
  create-type-task(|ctx) :
    Extends(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    NoExtends() -> <task-create-id(|ctx,[x777])> x777
    where 
      x777 := <type-is(|ctx)> ClassT("Object")
  
  create-type-task(|ctx) :
    x@This() -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    New(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Null(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Cast(c, e) -> <task-create-id(|ctx,[or20])> t
    where 
      t := <type-lookup(|ctx)> c;
      t_e := <type-task(|ctx); task-create-id(|ctx, [t])> e;
      relmatch44 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      relmatch45 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t, t_e);
      or20 := <type-is(|ctx)> <task-create-choice(|ctx)> [relmatch44, relmatch45];
      <task-create-error-on-failure(|ctx, or20, [c, " should be sub- or super-type of ", t_e])> c
  
  create-type-task(|ctx) :
    Param(t, x) -> <task-create-id(|ctx,[])> t
  
  create-type-task(|ctx) :
    Var(x) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    Call(e, m, es) -> <task-create-id(|ctx,[relmatch46])> t
    where 
      x778 := <type-lookup(|ctx)> m;
      t1_ := <new-task(|ctx)> Rewrite("proj58", x778); task-create-id(|ctx, [x778]);
      t := <new-task(|ctx)> Rewrite("proj59", x778); task-create-id(|ctx, [t1_]);
      t2_ := <type-task(|ctx); task-create-id(|ctx, [t])> es;
      relmatch46 := <relation-create-match(|ctx); task-create-id(|ctx, [t2_])> ("<sub:", t2_, t1_);
      <task-create-error-on-failure(|ctx, relmatch46, ["argument types ", t2_, " not a sub-type of method parameter types ", t1_])> es
  
  create-type-task(|ctx) :
    Bind(t, x, e) -> <task-create-id(|ctx,[relmatch47])> t
    where 
      t_e := <type-task(|ctx)> e;
      relmatch47 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      <task-create-error-on-failure(|ctx, relmatch47, [t, " is not a sub-type of ", t_e])> e
  
  create-type-task(|ctx) :
    Num(i) -> <task-create-id(|ctx,[x779])> x779
    where 
      x779 := <type-is(|ctx)> NumT()
  
  create-type-task(|ctx) :
    Min(e) -> <task-create-id(|ctx,[x781])> x781
    where 
      x780 := <type-task(|ctx)> e;
      eq210 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x780])> x780;
      <task-create-error-on-failure(|ctx, eq210, "number expected")> e;
      x781 := <type-is(|ctx); task-create-id(|ctx, [eq210])> NumT()
  
  create-type-task(|ctx) :
    Add(e1, e2) -> <task-create-id(|ctx,[x784])> x784
    where 
      x782 := <type-task(|ctx)> e1;
      eq211 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x782])> x782;
      <task-create-error-on-failure(|ctx, eq211, "number expected")> e1;
      x783 := <type-task(|ctx); task-create-id(|ctx, [eq211])> e2;
      eq212 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x783])> x783;
      <task-create-error-on-failure(|ctx, eq212, "number expected")> e2;
      x784 := <type-is(|ctx); task-create-id(|ctx, [eq212])> NumT()
  
  create-type-task(|ctx) :
    Sub(e1, e2) -> <task-create-id(|ctx,[x784])> x784
    where 
      x782 := <type-task(|ctx)> e1;
      eq213 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x782])> x782;
      <task-create-error-on-failure(|ctx, eq213, "number expected")> e1;
      x783 := <type-task(|ctx); task-create-id(|ctx, [eq213])> e2;
      eq214 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x783])> x783;
      <task-create-error-on-failure(|ctx, eq214, "number expected")> e2;
      x784 := <type-is(|ctx); task-create-id(|ctx, [eq214])> NumT()
  
  create-type-task(|ctx) :
    Mul(e1, e2) -> <task-create-id(|ctx,[x784])> x784
    where 
      x782 := <type-task(|ctx)> e1;
      eq215 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x782])> x782;
      <task-create-error-on-failure(|ctx, eq215, "number expected")> e1;
      x783 := <type-task(|ctx); task-create-id(|ctx, [eq215])> e2;
      eq216 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x783])> x783;
      <task-create-error-on-failure(|ctx, eq216, "number expected")> e2;
      x784 := <type-is(|ctx); task-create-id(|ctx, [eq216])> NumT()
  
  create-type-task(|ctx) :
    Eq(e1, e2) -> <task-create-id(|ctx,[x787])> x787
    where 
      x785 := <type-task(|ctx)> e1;
      eq217 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x785])> x785;
      <task-create-error-on-failure(|ctx, eq217, "number expected")> e1;
      x786 := <type-task(|ctx); task-create-id(|ctx, [eq217])> e2;
      eq218 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x786])> x786;
      <task-create-error-on-failure(|ctx, eq218, "number expected")> e2;
      x787 := <type-is(|ctx); task-create-id(|ctx, [eq218])> BoolT()
  
  create-type-task(|ctx) :
    Neq(e1, e2) -> <task-create-id(|ctx,[x787])> x787
    where 
      x785 := <type-task(|ctx)> e1;
      eq219 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x785])> x785;
      <task-create-error-on-failure(|ctx, eq219, "number expected")> e1;
      x786 := <type-task(|ctx); task-create-id(|ctx, [eq219])> e2;
      eq220 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x786])> x786;
      <task-create-error-on-failure(|ctx, eq220, "number expected")> e2;
      x787 := <type-is(|ctx); task-create-id(|ctx, [eq220])> BoolT()
  
  create-type-task(|ctx) :
    Lt(e1, e2) -> <task-create-id(|ctx,[x787])> x787
    where 
      x785 := <type-task(|ctx)> e1;
      eq221 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x785])> x785;
      <task-create-error-on-failure(|ctx, eq221, "number expected")> e1;
      x786 := <type-task(|ctx); task-create-id(|ctx, [eq221])> e2;
      eq222 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x786])> x786;
      <task-create-error-on-failure(|ctx, eq222, "number expected")> e2;
      x787 := <type-is(|ctx); task-create-id(|ctx, [eq222])> BoolT()
  
  create-type-task(|ctx) :
    True() -> <task-create-id(|ctx,[x788])> x788
    where 
      x788 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    False() -> <task-create-id(|ctx,[x789])> x789
    where 
      x789 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x791])> x791
    where 
      x790 := <type-task(|ctx)> e;
      eq223 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x790])> x790;
      <task-create-error-on-failure(|ctx, eq223, "boolean expected")> e;
      x791 := <type-is(|ctx); task-create-id(|ctx, [eq223])> BoolT()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x794])> x794
    where 
      x792 := <type-task(|ctx)> e1;
      eq224 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x792])> x792;
      <task-create-error-on-failure(|ctx, eq224, "boolean expected")> e1;
      x793 := <type-task(|ctx); task-create-id(|ctx, [eq224])> e2;
      eq225 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x793])> x793;
      <task-create-error-on-failure(|ctx, eq225, "boolean expected")> e2;
      x794 := <type-is(|ctx); task-create-id(|ctx, [eq225])> BoolT()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x794])> x794
    where 
      x792 := <type-task(|ctx)> e1;
      eq226 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x792])> x792;
      <task-create-error-on-failure(|ctx, eq226, "boolean expected")> e1;
      x793 := <type-task(|ctx); task-create-id(|ctx, [eq226])> e2;
      eq227 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x793])> x793;
      <task-create-error-on-failure(|ctx, eq227, "boolean expected")> e2;
      x794 := <type-is(|ctx); task-create-id(|ctx, [eq227])> BoolT()
  
  create-type-task(|ctx) :
    Do([e]) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    Do([e1, e2]) -> <task-create-id(|ctx,[t2])> t2
    where 
      t1 := <type-task(|ctx)> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2
  
  create-type-task(|ctx) :
    e@Skip() -> <task-create-id(|ctx,[x795])> x795
    where 
      eq228 := <type-match(|ctx, BoolT())> NumT();
      <task-create-error-on-failure(|ctx, eq228, ["block should have at least one expression"])> e;
      x795 := <type-is(|ctx); task-create-id(|ctx, [eq228])> UnitT()
  
  create-type-task(|ctx) :
    Let(bs, e) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    If(e1, e2, e3) -> <task-create-id(|ctx,[t])> t
    where 
      x796 := <type-task(|ctx)> e1;
      eq229 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x796])> x796;
      <task-create-error-on-failure(|ctx, eq229, "boolean expected")> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [eq229])> e2;
      t3 := <type-task(|ctx); task-create-id(|ctx, [t2])> e3;
      t := <type-func-least-upper-bound(|ctx); task-create-id(|ctx, [t3])> (t2, t3);
      <task-create-error-on-failure(|ctx, t, ["Branches do not have a common super type: ", t3, " does not have a common super type with ", t2])> e3
  
  create-type-task(|ctx) :
    Get(e, f) -> <task-create-id(|ctx,[t])> t
    where 
      x797 := <type-task(|ctx)> e;
      c := <new-task(|ctx)> Rewrite("proj57", x797); task-create-id(|ctx, [x797]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e;
      t := <type-lookup(|ctx); task-create-id(|ctx, [c])> f
  
  create-type-task(|ctx) :
    Set(e1, f, e2) -> <task-create-id(|ctx,[or21])> t2
    where 
      t_e1 := <type-task(|ctx)> e1;
      c := <new-task(|ctx)> Rewrite("proj56", t_e1); task-create-id(|ctx, [t_e1]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e1;
      t1 := <type-lookup(|ctx); task-create-id(|ctx, [c])> f;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2;
      eq230 := <type-match(|ctx, t1); task-create-id(|ctx, [t2])> t2;
      relmatch48 := <relation-create-match(|ctx); task-create-id(|ctx, [t2])> ("<sub:", t2, t1);
      or21 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq230, relmatch48];
      <task-create-error-on-failure(|ctx, or21, ["should be subtype of ", t1])> e2
  

rules // projections
  
  task-rewrite :
    ("proj59", (_, t)) -> t
  
  task-rewrite :
    ("proj58", (t1_, _)) -> t1_
  
  task-rewrite :
    ("proj57", ClassT(c)) -> c
  
  task-rewrite :
    ("proj56", ClassT(c)) -> c
  
