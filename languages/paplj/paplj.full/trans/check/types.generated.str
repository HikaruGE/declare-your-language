module trans/check/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  src-gen/signatures/Programs-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Classes-sig
  
signature constructors
  
  
  
rules // functions 
  
  type-func-least-upper-bound(|ctx) : 
    False() -> False()
  

rules // relations
  
  relation-is-reflexive = ?"<sub:"
  
  relation-is-transitive = ?"<sub:"
  

rules // rules
  
  nabl-constraint(|ctx) :
    Class(c1, Extends(c2), _, _) -> <fail>
    where 
      relstore12 := <new-rel-tuple(|ctx, "<sub:", ClassT(c2))> ClassT(c1)
  
  create-type-task(|ctx) :
    Extends(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    NoExtends() -> <task-create-id(|ctx,[x861])> x861
    where 
      x861 := <type-is(|ctx)> ClassT("Object")
  
  create-type-task(|ctx) :
    x@This() -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    New(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Null(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Cast(c, e) -> <task-create-id(|ctx,[or24])> t
    where 
      t := <type-lookup(|ctx)> c;
      t_e := <type-task(|ctx); task-create-id(|ctx, [t])> e;
      relmatch54 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      relmatch55 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t, t_e);
      or24 := <type-is(|ctx)> <task-create-choice(|ctx)> [relmatch54, relmatch55];
      <task-create-error-on-failure(|ctx, or24, [c, " should be sub- or super-type of ", t_e])> c
  
  create-type-task(|ctx) :
    Param(t, x) -> <task-create-id(|ctx,[])> t
  
  create-type-task(|ctx) :
    Var(x) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    Call(e, m, es) -> <task-create-id(|ctx,[relmatch56])> t
    where 
      x862 := <type-lookup(|ctx)> m;
      t1_ := <new-task(|ctx)> Rewrite("proj66", x862); task-create-id(|ctx, [x862]);
      t := <new-task(|ctx)> Rewrite("proj67", x862); task-create-id(|ctx, [t1_]);
      t2_ := <type-task(|ctx); task-create-id(|ctx, [t])> es;
      relmatch56 := <relation-create-match(|ctx); task-create-id(|ctx, [t2_])> ("<sub:", t2_, t1_);
      <task-create-error-on-failure(|ctx, relmatch56, ["argument types ", t2_, " not a sub-type of method parameter types ", t1_])> es
  
  create-type-task(|ctx) :
    Bind(t, x, e) -> <task-create-id(|ctx,[relmatch57])> t
    where 
      t_e := <type-task(|ctx)> e;
      relmatch57 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      <task-create-error-on-failure(|ctx, relmatch57, [t, " is not a sub-type of ", t_e])> e
  
  create-type-task(|ctx) :
    Num(i) -> <task-create-id(|ctx,[x863])> x863
    where 
      x863 := <type-is(|ctx)> NumT()
  
  create-type-task(|ctx) :
    Min(e) -> <task-create-id(|ctx,[x865])> x865
    where 
      x864 := <type-task(|ctx)> e;
      eq252 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x864])> x864;
      <task-create-error-on-failure(|ctx, eq252, "number expected")> e;
      x865 := <type-is(|ctx); task-create-id(|ctx, [eq252])> NumT()
  
  create-type-task(|ctx) :
    Add(e1, e2) -> <task-create-id(|ctx,[x868])> x868
    where 
      x866 := <type-task(|ctx)> e1;
      eq253 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x866])> x866;
      <task-create-error-on-failure(|ctx, eq253, "number expected")> e1;
      x867 := <type-task(|ctx); task-create-id(|ctx, [eq253])> e2;
      eq254 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x867])> x867;
      <task-create-error-on-failure(|ctx, eq254, "number expected")> e2;
      x868 := <type-is(|ctx); task-create-id(|ctx, [eq254])> NumT()
  
  create-type-task(|ctx) :
    Sub(e1, e2) -> <task-create-id(|ctx,[x868])> x868
    where 
      x866 := <type-task(|ctx)> e1;
      eq255 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x866])> x866;
      <task-create-error-on-failure(|ctx, eq255, "number expected")> e1;
      x867 := <type-task(|ctx); task-create-id(|ctx, [eq255])> e2;
      eq256 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x867])> x867;
      <task-create-error-on-failure(|ctx, eq256, "number expected")> e2;
      x868 := <type-is(|ctx); task-create-id(|ctx, [eq256])> NumT()
  
  create-type-task(|ctx) :
    Mul(e1, e2) -> <task-create-id(|ctx,[x868])> x868
    where 
      x866 := <type-task(|ctx)> e1;
      eq257 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x866])> x866;
      <task-create-error-on-failure(|ctx, eq257, "number expected")> e1;
      x867 := <type-task(|ctx); task-create-id(|ctx, [eq257])> e2;
      eq258 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x867])> x867;
      <task-create-error-on-failure(|ctx, eq258, "number expected")> e2;
      x868 := <type-is(|ctx); task-create-id(|ctx, [eq258])> NumT()
  
  create-type-task(|ctx) :
    Eq(e1, e2) -> <task-create-id(|ctx,[x871])> x871
    where 
      x869 := <type-task(|ctx)> e1;
      eq259 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x869])> x869;
      <task-create-error-on-failure(|ctx, eq259, "number expected")> e1;
      x870 := <type-task(|ctx); task-create-id(|ctx, [eq259])> e2;
      eq260 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x870])> x870;
      <task-create-error-on-failure(|ctx, eq260, "number expected")> e2;
      x871 := <type-is(|ctx); task-create-id(|ctx, [eq260])> BoolT()
  
  create-type-task(|ctx) :
    Neq(e1, e2) -> <task-create-id(|ctx,[x871])> x871
    where 
      x869 := <type-task(|ctx)> e1;
      eq261 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x869])> x869;
      <task-create-error-on-failure(|ctx, eq261, "number expected")> e1;
      x870 := <type-task(|ctx); task-create-id(|ctx, [eq261])> e2;
      eq262 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x870])> x870;
      <task-create-error-on-failure(|ctx, eq262, "number expected")> e2;
      x871 := <type-is(|ctx); task-create-id(|ctx, [eq262])> BoolT()
  
  create-type-task(|ctx) :
    Lt(e1, e2) -> <task-create-id(|ctx,[x871])> x871
    where 
      x869 := <type-task(|ctx)> e1;
      eq263 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x869])> x869;
      <task-create-error-on-failure(|ctx, eq263, "number expected")> e1;
      x870 := <type-task(|ctx); task-create-id(|ctx, [eq263])> e2;
      eq264 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x870])> x870;
      <task-create-error-on-failure(|ctx, eq264, "number expected")> e2;
      x871 := <type-is(|ctx); task-create-id(|ctx, [eq264])> BoolT()
  
  create-type-task(|ctx) :
    True() -> <task-create-id(|ctx,[x872])> x872
    where 
      x872 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    False() -> <task-create-id(|ctx,[x873])> x873
    where 
      x873 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x875])> x875
    where 
      x874 := <type-task(|ctx)> e;
      eq265 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x874])> x874;
      <task-create-error-on-failure(|ctx, eq265, "boolean expected")> e;
      x875 := <type-is(|ctx); task-create-id(|ctx, [eq265])> BoolT()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x878])> x878
    where 
      x876 := <type-task(|ctx)> e1;
      eq266 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x876])> x876;
      <task-create-error-on-failure(|ctx, eq266, "boolean expected")> e1;
      x877 := <type-task(|ctx); task-create-id(|ctx, [eq266])> e2;
      eq267 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x877])> x877;
      <task-create-error-on-failure(|ctx, eq267, "boolean expected")> e2;
      x878 := <type-is(|ctx); task-create-id(|ctx, [eq267])> BoolT()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x878])> x878
    where 
      x876 := <type-task(|ctx)> e1;
      eq268 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x876])> x876;
      <task-create-error-on-failure(|ctx, eq268, "boolean expected")> e1;
      x877 := <type-task(|ctx); task-create-id(|ctx, [eq268])> e2;
      eq269 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x877])> x877;
      <task-create-error-on-failure(|ctx, eq269, "boolean expected")> e2;
      x878 := <type-is(|ctx); task-create-id(|ctx, [eq269])> BoolT()
  
  create-type-task(|ctx) :
    Do([e]) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    Do([e1, e2]) -> <task-create-id(|ctx,[t2])> t2
    where 
      t1 := <type-task(|ctx)> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2
  
  create-type-task(|ctx) :
    e@Skip() -> <task-create-id(|ctx,[x879])> x879
    where 
      eq270 := <type-match(|ctx, BoolT())> NumT();
      <task-create-error-on-failure(|ctx, eq270, ["block should have at least one expression"])> e;
      x879 := <type-is(|ctx); task-create-id(|ctx, [eq270])> UnitT()
  
  create-type-task(|ctx) :
    Let(bs, e) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    If(e1, e2, e3) -> <task-create-id(|ctx,[t])> t
    where 
      x880 := <type-task(|ctx)> e1;
      eq271 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x880])> x880;
      <task-create-error-on-failure(|ctx, eq271, "boolean expected")> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [eq271])> e2;
      t3 := <type-task(|ctx); task-create-id(|ctx, [t2])> e3;
      t := <type-func-least-upper-bound(|ctx); task-create-id(|ctx, [t3])> (t2, t3);
      <task-create-error-on-failure(|ctx, t, ["Branches do not have a common super type: ", t3, " does not have a common super type with ", t2])> e3
  
  create-type-task(|ctx) :
    Get(e, f) -> <task-create-id(|ctx,[t])> t
    where 
      x881 := <type-task(|ctx)> e;
      c := <new-task(|ctx)> Rewrite("proj65", x881); task-create-id(|ctx, [x881]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e;
      t := <type-lookup(|ctx); task-create-id(|ctx, [c])> f
  
  create-type-task(|ctx) :
    Set(e1, f, e2) -> <task-create-id(|ctx,[or25])> t2
    where 
      t_e1 := <type-task(|ctx)> e1;
      c := <new-task(|ctx)> Rewrite("proj64", t_e1); task-create-id(|ctx, [t_e1]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e1;
      t1 := <type-lookup(|ctx); task-create-id(|ctx, [c])> f;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2;
      eq272 := <type-match(|ctx, t1); task-create-id(|ctx, [t2])> t2;
      relmatch58 := <relation-create-match(|ctx); task-create-id(|ctx, [t2])> ("<sub:", t2, t1);
      or25 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq272, relmatch58];
      <task-create-error-on-failure(|ctx, or25, ["should be subtype of ", t1])> e2
  

rules // projections
  
  task-rewrite :
    ("proj67", (_, t)) -> t
  
  task-rewrite :
    ("proj66", (t1_, _)) -> t1_
  
  task-rewrite :
    ("proj65", ClassT(c)) -> c
  
  task-rewrite :
    ("proj64", ClassT(c)) -> c
  
