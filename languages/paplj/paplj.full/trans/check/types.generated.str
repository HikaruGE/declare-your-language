module trans/check/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  src-gen/signatures/Programs-sig
  src-gen/signatures/Expressions-sig
  src-gen/signatures/Classes-sig
  
signature constructors
  
  
  
rules // functions 
  
  type-func-least-upper-bound(|ctx) : 
    False() -> False()
  

rules // relations
  
  relation-is-reflexive = ?"<sub:"
  
  relation-is-transitive = ?"<sub:"
  

rules // rules
  
  nabl-constraint(|ctx) :
    Class(c1, Extends(c2), _, _) -> <fail>
    where 
      relstore0 := <new-rel-tuple(|ctx, "<sub:", ClassT(c2))> ClassT(c1)
  
  create-type-task(|ctx) :
    Extends(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    NoExtends() -> <task-create-id(|ctx,[x6])> x6
    where 
      x6 := <type-is(|ctx)> ClassT("Object")
  
  create-type-task(|ctx) :
    x@This() -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    New(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Null(c) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> c
  
  create-type-task(|ctx) :
    Cast(c, e) -> <task-create-id(|ctx,[or0])> t
    where 
      t := <type-lookup(|ctx)> c;
      t_e := <type-task(|ctx); task-create-id(|ctx, [t])> e;
      relmatch0 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      relmatch1 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t, t_e);
      or0 := <type-is(|ctx)> <task-create-choice(|ctx)> [relmatch0, relmatch1];
      <task-create-error-on-failure(|ctx, or0, [c, " should be sub- or super-type of ", t_e])> c
  
  create-type-task(|ctx) :
    Param(t, x) -> <task-create-id(|ctx,[])> t
  
  create-type-task(|ctx) :
    Var(x) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-lookup(|ctx)> x
  
  create-type-task(|ctx) :
    Call(e, m, es) -> <task-create-id(|ctx,[relmatch2])> t
    where 
      x7 := <type-lookup(|ctx)> m;
      t1_ := <new-task(|ctx)> Rewrite("proj6", x7); task-create-id(|ctx, [x7]);
      t := <new-task(|ctx)> Rewrite("proj7", x7); task-create-id(|ctx, [t1_]);
      t2_ := <type-task(|ctx); task-create-id(|ctx, [t])> es;
      relmatch2 := <relation-create-match(|ctx); task-create-id(|ctx, [t2_])> ("<sub:", t2_, t1_);
      <task-create-error-on-failure(|ctx, relmatch2, ["argument types ", t2_, " not a sub-type of method parameter types ", t1_])> es
  
  create-type-task(|ctx) :
    Bind(t, x, e) -> <task-create-id(|ctx,[relmatch3])> t
    where 
      t_e := <type-task(|ctx)> e;
      relmatch3 := <relation-create-match(|ctx); task-create-id(|ctx, [t_e])> ("<sub:", t_e, t);
      <task-create-error-on-failure(|ctx, relmatch3, [t, " is not a sub-type of ", t_e])> e
  
  create-type-task(|ctx) :
    Num(i) -> <task-create-id(|ctx,[x8])> x8
    where 
      x8 := <type-is(|ctx)> NumT()
  
  create-type-task(|ctx) :
    Min(e) -> <task-create-id(|ctx,[x10])> x10
    where 
      x9 := <type-task(|ctx)> e;
      eq0 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x9])> x9;
      <task-create-error-on-failure(|ctx, eq0, "number expected")> e;
      x10 := <type-is(|ctx); task-create-id(|ctx, [eq0])> NumT()
  
  create-type-task(|ctx) :
    Add(e1, e2) -> <task-create-id(|ctx,[x13])> x13
    where 
      x11 := <type-task(|ctx)> e1;
      eq1 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x11])> x11;
      <task-create-error-on-failure(|ctx, eq1, "number expected")> e1;
      x12 := <type-task(|ctx); task-create-id(|ctx, [eq1])> e2;
      eq2 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x12])> x12;
      <task-create-error-on-failure(|ctx, eq2, "number expected")> e2;
      x13 := <type-is(|ctx); task-create-id(|ctx, [eq2])> NumT()
  
  create-type-task(|ctx) :
    Sub(e1, e2) -> <task-create-id(|ctx,[x13])> x13
    where 
      x11 := <type-task(|ctx)> e1;
      eq3 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x11])> x11;
      <task-create-error-on-failure(|ctx, eq3, "number expected")> e1;
      x12 := <type-task(|ctx); task-create-id(|ctx, [eq3])> e2;
      eq4 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x12])> x12;
      <task-create-error-on-failure(|ctx, eq4, "number expected")> e2;
      x13 := <type-is(|ctx); task-create-id(|ctx, [eq4])> NumT()
  
  create-type-task(|ctx) :
    Mul(e1, e2) -> <task-create-id(|ctx,[x13])> x13
    where 
      x11 := <type-task(|ctx)> e1;
      eq5 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x11])> x11;
      <task-create-error-on-failure(|ctx, eq5, "number expected")> e1;
      x12 := <type-task(|ctx); task-create-id(|ctx, [eq5])> e2;
      eq6 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x12])> x12;
      <task-create-error-on-failure(|ctx, eq6, "number expected")> e2;
      x13 := <type-is(|ctx); task-create-id(|ctx, [eq6])> NumT()
  
  create-type-task(|ctx) :
    Eq(e1, e2) -> <task-create-id(|ctx,[x16])> x16
    where 
      x14 := <type-task(|ctx)> e1;
      eq7 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x14])> x14;
      <task-create-error-on-failure(|ctx, eq7, "number expected")> e1;
      x15 := <type-task(|ctx); task-create-id(|ctx, [eq7])> e2;
      eq8 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x15])> x15;
      <task-create-error-on-failure(|ctx, eq8, "number expected")> e2;
      x16 := <type-is(|ctx); task-create-id(|ctx, [eq8])> BoolT()
  
  create-type-task(|ctx) :
    Neq(e1, e2) -> <task-create-id(|ctx,[x16])> x16
    where 
      x14 := <type-task(|ctx)> e1;
      eq9 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x14])> x14;
      <task-create-error-on-failure(|ctx, eq9, "number expected")> e1;
      x15 := <type-task(|ctx); task-create-id(|ctx, [eq9])> e2;
      eq10 := <type-match(|ctx, NumT()); task-create-id(|ctx, [x15])> x15;
      <task-create-error-on-failure(|ctx, eq10, "number expected")> e2;
      x16 := <type-is(|ctx); task-create-id(|ctx, [eq10])> BoolT()
  
  create-type-task(|ctx) :
    True() -> <task-create-id(|ctx,[x17])> x17
    where 
      x17 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    False() -> <task-create-id(|ctx,[x18])> x18
    where 
      x18 := <type-is(|ctx)> BoolT()
  
  create-type-task(|ctx) :
    Not(e) -> <task-create-id(|ctx,[x20])> x20
    where 
      x19 := <type-task(|ctx)> e;
      eq11 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x19])> x19;
      <task-create-error-on-failure(|ctx, eq11, "boolean expected")> e;
      x20 := <type-is(|ctx); task-create-id(|ctx, [eq11])> BoolT()
  
  create-type-task(|ctx) :
    And(e1, e2) -> <task-create-id(|ctx,[x23])> x23
    where 
      x21 := <type-task(|ctx)> e1;
      eq12 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x21])> x21;
      <task-create-error-on-failure(|ctx, eq12, "boolean expected")> e1;
      x22 := <type-task(|ctx); task-create-id(|ctx, [eq12])> e2;
      eq13 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x22])> x22;
      <task-create-error-on-failure(|ctx, eq13, "boolean expected")> e2;
      x23 := <type-is(|ctx); task-create-id(|ctx, [eq13])> BoolT()
  
  create-type-task(|ctx) :
    Or(e1, e2) -> <task-create-id(|ctx,[x23])> x23
    where 
      x21 := <type-task(|ctx)> e1;
      eq14 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x21])> x21;
      <task-create-error-on-failure(|ctx, eq14, "boolean expected")> e1;
      x22 := <type-task(|ctx); task-create-id(|ctx, [eq14])> e2;
      eq15 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x22])> x22;
      <task-create-error-on-failure(|ctx, eq15, "boolean expected")> e2;
      x23 := <type-is(|ctx); task-create-id(|ctx, [eq15])> BoolT()
  
  create-type-task(|ctx) :
    Do([e]) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    Do([e1, e2]) -> <task-create-id(|ctx,[t2])> t2
    where 
      t1 := <type-task(|ctx)> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2
  
  create-type-task(|ctx) :
    e@Skip() -> <task-create-id(|ctx,[x24])> x24
    where 
      eq16 := <type-match(|ctx, BoolT())> NumT();
      <task-create-error-on-failure(|ctx, eq16, ["block should have at least one expression"])> e;
      x24 := <type-is(|ctx); task-create-id(|ctx, [eq16])> UnitT()
  
  create-type-task(|ctx) :
    Let(bs, e) -> <task-create-id(|ctx,[t])> t
    where 
      t := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    If(e1, e2, e3) -> <task-create-id(|ctx,[t])> t
    where 
      x25 := <type-task(|ctx)> e1;
      eq17 := <type-match(|ctx, BoolT()); task-create-id(|ctx, [x25])> x25;
      <task-create-error-on-failure(|ctx, eq17, "boolean expected")> e1;
      t2 := <type-task(|ctx); task-create-id(|ctx, [eq17])> e2;
      t3 := <type-task(|ctx); task-create-id(|ctx, [t2])> e3;
      t := <type-func-least-upper-bound(|ctx); task-create-id(|ctx, [t3])> (t2, t3);
      <task-create-error-on-failure(|ctx, t, ["Branches do not have a common super type: ", t3, " does not have a common super type with ", t2])> e3
  
  create-type-task(|ctx) :
    Get(e, f) -> <task-create-id(|ctx,[t])> t
    where 
      x26 := <type-task(|ctx)> e;
      c := <new-task(|ctx)> Rewrite("proj5", x26); task-create-id(|ctx, [x26]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e;
      t := <type-lookup(|ctx); task-create-id(|ctx, [c])> f
  
  create-type-task(|ctx) :
    Set(e1, f, e2) -> <task-create-id(|ctx,[or1])> t2
    where 
      t_e1 := <type-task(|ctx)> e1;
      c := <new-task(|ctx)> Rewrite("proj4", t_e1); task-create-id(|ctx, [t_e1]);
      <task-create-error-on-failure(|ctx, c, "class type expected")> e1;
      t1 := <type-lookup(|ctx); task-create-id(|ctx, [c])> f;
      t2 := <type-task(|ctx); task-create-id(|ctx, [t1])> e2;
      eq18 := <type-match(|ctx, t1); task-create-id(|ctx, [t2])> t2;
      relmatch4 := <relation-create-match(|ctx); task-create-id(|ctx, [t2])> ("<sub:", t2, t1);
      or1 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq18, relmatch4];
      <task-create-error-on-failure(|ctx, or1, ["should be subtype of ", t1])> e2
  

rules // projections
  
  task-rewrite :
    ("proj7", (_, t)) -> t
  
  task-rewrite :
    ("proj6", (t1_, _)) -> t1_
  
  task-rewrite :
    ("proj5", ClassT(c)) -> c
  
  task-rewrite :
    ("proj4", ClassT(c)) -> c
  
